{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fadeInContent, transformPanel} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPanel,\n    fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\n\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","transformPanel","trigger","state","style","opacity","minWidth","transform","transition","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","type","Directive","args","selector","MatSelectTrigger","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","onOpen","_openedStream","onClose","_closedStream","selectionChange","change","valueChange","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","filter","o","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","overlayDir","overlayRef","overlayElement","fontSize","focus","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","_isRtl","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","ENTER","SPACE","altKey","preventDefault","_keyManager","onKeydown","HOME","END","setFirstItemActive","setLastItemActive","activeItem","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","toArray","indexOf","find","error","isDevMode","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","_getOptionIndex","itemHeight","_getItemHeight","activeOptionIndex","activeItemIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","Math","max","reduce","result","current","index","items","_getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","exports","MatFormFieldModule","declarations"],"mappings":"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"}