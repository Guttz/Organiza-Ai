{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      this._opened = false;\n      this.closedStream.emit();\n      this._focusedElementBeforeOpen = null;\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthVeiw',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _monthView: boolean;\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n\n  get _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * Determine the date for the month that comes before the given month in the same column in the\n   * calendar table.\n   */\n  private _prevMonthInSameCol(date: D): D {\n    // Decrement by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, -4);\n  }\n\n  /**\n   * Determine the date for the month that comes after the given month in the same column in the\n   * calendar table.\n   */\n  private _nextMonthInSameCol(date: D): D {\n    // Increment by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, 4);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n"],"names":["selectedChanged","type","Output","panelClass","Input","openedStream","args","closedStream","opened","MatDatepicker","MAT_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","this","value","_elementRef","_dateAdapter","_dateFormats","_formField","_this","dateChange","EventEmitter","dateInput","_valueChange","_disabledChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","subscribe","Object","defineProperty","prototype","registerDatepicker","_datepicker","_registerInput","filter","_value","isValid","oldDate","format","display","sameDate","emit","_min","_max","_disabled","newValue","coerceBooleanProperty","ngAfterContentInit","selected","ngOnDestroy","unsubscribe","complete","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","underlineRef","_getPopupFallbackOffset","_inputContainerRef","clientHeight","writeValue","registerOnChange","registerOnTouched","setDisabledState","disabled","_onKeydown","event","altKey","keyCode","DOWN_ARROW","open","preventDefault","_onInput","date","parse","_onChange","obj","isDateInstance","Directive","selector","providers","MAT_INPUT_VALUE_ACCESSOR","host","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","exportAs","ElementRef","DateAdapter","decorators","Optional","undefined","Inject","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","datepicker","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","_datepickerInput","merge","markForCheck","Component","template","class","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","MatIconModule","OverlayModule","A11yModule","exports","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","declarations","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","entryComponents","provider","Error","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","switchToMonthViewLabel","switchToYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","styles","todayValue","selectedValue","labelMinRequiredCells","selectedChange","_userSelection","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","dateFilter","dateA11yLabel","getDate","d1","d2","ChangeDetectorRef","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","Math","_todayMonth","_yearLabel","getYearName","monthNames","_months","row","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","_ngZone","changeDetectorRef","startView","_dateFilterForViews","minDate","maxDate","_intlChanges","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_monthView","monthYearLabel","startAt","_focusActiveCell","change","firstChange","view","monthView","yearView","_userSelected","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","runOutsideAngular","onStable","asObservable","pipe","take","querySelector","focus","date1","date2","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","_prevMonthInSameCol","_nextMonthInSameCol","NgZone","ViewChild","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","deps","Overlay","useFactory","_calendar","_handleKeydown","ESCAPE","close","[class.mat-datepicker-content-touch]","_overlay","_viewContainerRef","_scrollStrategy","_dir","_document","get","set","enumerable","configurable","next","_inputSubscription","_popupRef","dispose","oldValue","input","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","viewContainerRef","afterClosed","componentInstance","_createPopup","attach","instance","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","backdropClick","connectedTo","originX","originY","overlayX","overlayY","withFallbackPosition","fallbackOffset","ctorParameters","MatDialog","Directionality","DOCUMENT"],"mappings":"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"}