{"version":3,"file":"material-dialog.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() location: Location,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    // Close when escape keydown event occurs\n    overlayRef.keydownEvents().pipe(\n      filter(event => event.keyCode === ESCAPE && !dialogRef.disableClose)\n    ).subscribe(() => dialogRef.close());\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n      }\n    }\n  }\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MatDialogConfig): MatDialogConfig {\n  return {...new MatDialogConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwMatDialogContentAlreadyAttachedError","Error","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","_applyConfigDefaults","config","tslib_1.__assign","MatDialogConfig","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","direction","ariaDescribedBy","ariaLabel","autoFocus","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_this","_super","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","EventEmitter","_ariaLabelledBy","tslib_1.__extends","attachComponentPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","_focusTrap","nativeElement","_config","focusInitialElementWhenReady","_restoreFocus","toFocus","focus","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","trigger","state","style","transform","opacity","transition","animate","host","class","tabindex","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","ChangeDetectorRef","undefined","decorators","Optional","Inject","DOCUMENT","propDecorators","BasePortalOutlet","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpen","Subject","_afterClosed","_beforeClose","pipe","filter","phaseName","take","subscribe","next","complete","dispose","_result","componentInstance","close","dialogResult","detachBackdrop","afterOpen","asObservable","afterClosed","beforeClose","backdropClick","keydownEvents","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","InjectionToken","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatDialog","_overlay","_injector","location","_scrollStrategy","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","afterAllClosed","defer","openDialogs","_afterAllClosed","startWith","closeAll","defineProperty","parent","open","componentOrTemplateRef","getDialogById","overlayRef","_createOverlay","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","push","_removeOpenDialog","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","OverlayConfig","positionStrategy","global","scrollStrategy","minWidth","minHeight","maxHeight","containerPortal","ComponentPortal","viewContainerRef","containerRef","attach","instance","keyCode","ESCAPE","TemplateRef","TemplatePortal","$implicit","injector","_createInjector","contentRef","userInjector","injectionTokens","WeakMap","set","Directionality","value","change","observableOf","PortalInjector","index","indexOf","splice","Injectable","Injector","Location","SkipSelf","dialogElementUid","MatDialogClose","ngOnChanges","changes","proxiedChange","currentValue","Directive","exportAs","(click)","Input","_matDialogClose","MatDialogTitle","_container","ngOnInit","[id]","MatDialogContent","MatDialogActions","MatDialogModule","NgModule","imports","CommonModule","OverlayModule","PortalModule","A11yModule","MatCommonModule","exports","declarations","providers","entryComponents"],"mappings":"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"}