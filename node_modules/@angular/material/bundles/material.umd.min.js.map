{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /** Ripple config for all ripples created by events. */\n  rippleConfig: RippleConfig = {};\n\n  /** Whether mouse ripples should be created or not. */\n  rippleDisabled: boolean = false;\n\n  constructor(elementRef: ElementRef, private _ngZone: NgZone, platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets the trigger element and registers the mouse events. */\n  setTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) =>\n            element.addEventListener(type, fn, this._eventOptions));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(event.touches[0].clientX, event.touches[0].clientY, this.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\n// TODO(devversion): Move into global utility function.\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fadeInContent, transformPanel} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPanel,\n    fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n      state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleGlobalOptions,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase = mixinTabIndex(mixinDisabled(MatTabLinkBase));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Whether the ripples for this tab should be disabled or not. */\n  private _disableRipple: boolean = false;\n\n  /** Reference to the instance of the ripple for the tab link. */\n  private _tabLinkRipple: MatRipple;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /** Whether ripples should be disabled or not. */\n  get disableRipple(): boolean { return this.disabled || this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MatRipple(_elementRef, ngZone, platform, globalOptions);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.0.2-c3d7cd9');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\nexport const SHOW_ANIMATION =\n    `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\nexport const HIDE_ANIMATION =\n    `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n      transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n        animate(HIDE_ANIMATION)),\n      transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n    ])\n  ],\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  keyframes,\n} from '@angular/animations';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n\nconst SORT_ANIMATION_TRANSITION =\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    trigger('indicator', [\n      state('asc', style({transform: 'translateY(0px)'})),\n      // 10px is the height of the sort indicator, minus the width of the pointers\n      state('desc', style({transform: 'translateY(10px)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('leftPointer', [\n      state('asc', style({transform: 'rotate(-45deg)'})),\n      state('desc', style({transform: 'rotate(45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('rightPointer', [\n      state('asc', style({transform: 'rotate(45deg)'})),\n      state('desc', style({transform: 'rotate(-45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('indicatorToggle', [\n      transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'translateY(25%)', opacity: 0}),\n        style({transform: 'none', opacity: 1})\n      ]))),\n      transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'none', opacity: 1}),\n        style({transform: 'translateY(-25%)', opacity: 0})\n      ]))),\n      transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'translateY(-25%)', opacity: 0}),\n        style({transform: 'none', opacity: 1})\n      ]))),\n      transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n        style({transform: 'none', opacity: 1}),\n        style({transform: 'translateY(25%)', opacity: 0})\n      ]))),\n    ])\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n      state('current', style({transform: 'none', visibility: 'visible'})),\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n      transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({height: '0px', visibility: 'hidden'})),\n      state('next', style({height: '0px', visibility: 'hidden'})),\n      state('current', style({height: '*', visibility: 'visible'})),\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    let event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.onChange(this.checked);\n    this.change.emit(event);\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: any = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {trigger, style, transition, animate} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('contentFade', [\n      transition(':enter', [\n        style({opacity: '0'}),\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n      ])\n    ])\n  ],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._validateDrawers());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInItems, transformMenu} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\n\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve(() => this.selected && this.selectionList._reportValueChange());\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap();\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n\n\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({\n        height: '{{collapsedHeight}}',\n      }), {\n        params: {collapsedHeight: '48px'},\n      }),\n      state('expanded', style({\n        height: '{{expandedHeight}}'\n      }), {\n        params: {expandedHeight: '64px'}\n      }),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, false);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _monthView: boolean;\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n\n  get _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * Determine the date for the month that comes before the given month in the same column in the\n   * calendar table.\n   */\n  private _prevMonthInSameCol(date: D): D {\n    // Decrement by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, -4);\n  }\n\n  /**\n   * Determine the date for the month that comes after the given month in the same column in the\n   * calendar table.\n   */\n  private _nextMonthInSameCol(date: D): D {\n    // Increment by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, 4);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      this._opened = false;\n      this.closedStream.emit();\n      this._focusedElementBeforeOpen = null;\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input() get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input() get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() location: Location,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    // Close when escape keydown event occurs\n    overlayRef.keydownEvents().pipe(\n      filter(event => event.keyCode === ESCAPE && !dialogRef.disableClose)\n    ).subscribe(() => dialogRef.close());\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n      }\n    }\n  }\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MatDialogConfig): MatDialogConfig {\n  return {...new MatDialogConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(@Optional() private _httpClient: HttpClient, private _sanitizer: DomSanitizer) {}\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input() fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input() fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthVeiw',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MatOption, MatOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n})\nexport class MatAutocomplete implements AfterContentInit {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n  @Input('matRippleTrigger') trigger: HTMLElement|HTMLElement;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled') disabled: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /** Custom color for ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether foreground ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  constructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n\n  ngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Updates the ripple renderer with the latest ripple configuration. */\n  _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport {MatRipple, RippleGlobalOptions, MAT_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","MatInkBar","prototype","_setStyles","element","inkBar","this","_elementRef","nativeElement","style","left","offsetLeft","width","offsetWidth","type","Directive","args","selector","host","class","ElementRef","NgZone","MatTabLabel","templateRef","viewContainerRef","_super","call","tslib_1.__extends","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","_this","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","Object","defineProperty","ngOnChanges","changes","hasOwnProperty","next","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Component","template","inputs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","exportAs","propDecorators","Input","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","unsubscribe","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","value","styles","animations","trigger","state","transform","transition","animate","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","apply","map","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","MatRipple","ngZone","platform","globalOptions","parseInt","get","enumerable","configurable","_updateRippleRenderer","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","declarations","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","MatToolbarModule","PlatformModule","VERSION","Version","role","[@state]","(@state.done)","HIDE_ANIMATION","SHOW_ANIMATION","MatSnackBarContainer","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","snackBarRef","_attach","afterDismissed","containerInstance","enter","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","announce","politeness","open","message","action","data","SimpleSnackBar","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","snackBarConfig","_createOverlay","container","MatSnackBarRef","injector","_createInjector","portal","contentRef","attachComponentPortal","observe","Breakpoints","Handset","detachments","take","matches","overlayElement","overlayConfig","OverlayConfig","direction","positionStrategy","global","isRtl","isLeft","horizontalPosition","isRight","right","centerHorizontally","verticalPosition","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","(click)","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","keyframes","opacity","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","visibility","ctorParameters","MatVerticalStepper","MatStepperNext","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","hide","_inputElement","MatSlideToggle","_onChangeEvent","stopPropagation","_slideRenderer","dragging","checked","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","focusVia","toggle","_onInputFocusChange","focusOrigin","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","_rippleConfig","MatSlideToggleChange","source","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","labelPosition","ariaLabel","ariaLabelledby","required","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","asObservable","_onEnter","InjectionToken","MatSnackBarConfig","COMPLEX","[@contentFade]","DECELERATION_CURVE","EXITING","ACCELERATION_CURVE","_animationState","_portalOutlet","Error","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","onMicrotaskEmpty","Array","isArray","cssClass","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","MatRadioGroup","_changeDetector","_name","nextUniqueId","_isInitialized","_labelPosition","_disabled","_required","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","ContentChildren","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","_checked","centered","radius","speedFactor","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_validateDrawers","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleBase","_MatSlideToggleMixinBase","_","MatTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","_disposeTooltip","IOS","_manualListeners","listener","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","MatSpinner","MatProgressSpinnerModule","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","rootNode","resetActiveItem","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","_getOptionIndex","itemHeight","_getItemHeight","activeOptionIndex","activeItemIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","addEventListener","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","_setOptionsFromValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","newElevation","customElevation","c","_previousElevation","_onAnimationDone","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionPanelContent","_template","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","_hideToggle","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","params","collapsedHeight","expandedHeight","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","oldActiveDate","_activeDate","_getValidDateOrNull","_dateAdapter","deserialize","today","getYear","_init","MatYearView","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","daysInMonth","getNumDaysInMonth","createDate","activeDate","selectedChange","getDate","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","date","getMonth","monthName","format","_dateFormats","display","monthYearA11yLabel","MatCalendarCell","toLocaleUpperCase","_isMonthEnabled","dateFilter","firstOfMonth","addCalendarDays","isDateInstance","isValid","MatCalendar","startView","_userSelection","_dateFilterForViews","minDate","compareDate","maxDate","createMissingDateImplError","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_monthView","monthYearLabel","switchToYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","nextMonthLabel","nextYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","_dateSelected","sameDate","_userSelected","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","date1","date2","_prevMonthInSameCol","_nextMonthInSameCol","DateAdapter","MAT_DATE_FORMATS","MatMonthView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContent","_calendar","datepicker","[class.mat-datepicker-content-touch]","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","getPopupConnectionElementRef","fallbackOffset","MatDialog","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","registerOnValidatorChange","validate","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","parse","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","matDatepicker","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","disableClose","_afterOpen","_beforeClose","_animationStateChanged","phaseName","_result","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","keydownEvents","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","afterAllClosed","openDialogs","_afterAllClosed","closeAll","componentOrTemplateRef","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_removeOpenDialog","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","Location","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","MatDialogConfig","ariaDescribedBy","autoFocus","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","_destroyPanel","autocomplete","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","optionSelections","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","button","anchor","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","hasAttribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","year","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","rippleConfig","rippleDisabled","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","setTriggerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_rippleRenderer","_globalOptions","baseSpeedFactor","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}