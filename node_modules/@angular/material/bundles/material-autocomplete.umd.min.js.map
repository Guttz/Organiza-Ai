{"version":3,"file":"material-autocomplete.umd.min.js","sources":["../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MatOption, MatOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n})\nexport class MatAutocomplete implements AfterContentInit {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n"],"names":["MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","getMatAutocompleteMissingPanelError","Error","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","this","MatAutocomplete","_changeDetectorRef","_elementRef","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","_classList","id","Object","defineProperty","prototype","classList","length","split","forEach","className","_this","trim","nativeElement","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","host","class","propDecorators","ContentChildren","MatOption","descendants","optionGroups","MatOptgroup","Input","Output","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","InjectionToken","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatAutocompleteTrigger","multi","_element","_overlay","_viewContainerRef","_zone","_scrollStrategy","_dir","_formField","_document","_panelOpen","_manuallyFloatingLabel","_escapeEventStream","Subject","_onChange","_onTouched","ngOnDestroy","_destroyPanel","complete","autocomplete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_overlayRef","hasAttached","detach","_closingActionsSubscription","unsubscribe","detectChanges","merge","optionSelections","tabOut","pipe","filter","_outsideClickStream","detachments","observableOf","apply","map","onSelectionChange","activeItem","fromEvent","clickTarget","formField","contains","overlayElement","writeValue","value","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","ESCAPE","panelOpen","_resetActiveItem","next","stopPropagation","activeOption","ENTER","_selectViaInteraction","preventDefault","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_scrollToOption","_handleInput","document","activeElement","target","_handleFocus","readOnly","shouldAnimate","floatLabel","_animateAndLockLabel","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionOffset","panelTop","newScrollTop","Math","max","_subscribeToClosingActions","firstStable","onStable","asObservable","take","optionChanges","changes","tap","_positionStrategy","recalculateLastPosition","delay","switchMap","panelClosingActions","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","selected","deselect","updateSize","width","_getHostWidth","_portal","TemplatePortal","create","_getOverlayConfig","attach","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","direction","position","connectedTo","_getConnectedElement","originX","originY","overlayX","overlayY","withFallbackPosition","_connectionContainerRef","getBoundingClientRect","setActiveItem","Directive","role","aria-autocomplete","[attr.aria-activedescendant]","[attr.aria-expanded]","[attr.aria-owns]","(focusin)","(blur)","(input)","(keydown)","providers","ElementRef","ViewContainerRef","NgZone","ChangeDetectorRef","undefined","decorators","Inject","Directionality","Optional","MatFormField","Host","DOCUMENT","MatAutocompleteModule","NgModule","imports","MatOptionModule","OverlayModule","MatCommonModule","CommonModule","exports","declarations"],"mappings":";;;;;;;4kDAmEA,SAAAA,GAAkEC,GAEhE,MAAO,YAAM,MAAAA,GAAQC,iBAAiBC,cAuBxC,QAAAC,KACE,MAAOC,OAAM,6MC9Df,GAAIC,GAA+B,EAGnCC,EAAA,WACE,QAAFA,GAEWC,EAEAC,GAFAC,KAAXF,OAAWA,EAEAE,KAAXD,OAAWA,EAvCX,MAAAF,mBAyGE,QAAFI,GAAsBC,EAA+CC,GAA/CH,KAAtBE,mBAAsBA,EAA+CF,KAArEG,YAAqEA,EA3CrEH,KAAAI,WAAc,EAMdJ,KAAAK,SAAqB,EAerBL,KAAAM,YAA0D,KAI1DN,KAAAO,eAAM,GAAIC,GAAAA,aAaVR,KAAAS,cAGAT,KAAAU,GAAe,oBAAoBd,IAVnC,MA5BEe,QAAFC,eAAMX,EAANY,UAAA,cAAE,WACE,MAAOb,MAAKK,SAAWL,KAAKI,2CA4BhCO,OAAAC,eAAMX,EAANY,UAAA,iBAAA,SAAgBC,aACRA,IAAaA,EAAUC,SACzBD,EAAUE,MAAM,KAAKC,QAAQ,SAAAC,GAAa,MAAAC,GAAKV,WAAWS,EAAUE,SAAU,IAC9EpB,KAAKG,YAAYkB,cAAcH,UAAY,qCAU/CjB,EAAFY,UAAAS,mBAAE,WACEtB,KAAKuB,YAAc,GAAIC,GAAAA,2BAAsCxB,KAAKyB,SAASC,WAE3E1B,KAAK2B,kBAOP1B,EAAFY,UAAAe,cAAE,SAAcC,GACR7B,KAAK8B,QACP9B,KAAK8B,MAAMT,cAAcQ,UAAYA,IAKzC5B,EAAFY,UAAAkB,cAAE,WACE,MAAO/B,MAAK8B,MAAQ9B,KAAK8B,MAAMT,cAAcQ,UAAY,GAI3D5B,EAAFY,UAAAc,eAAE,WACE3B,KAAKI,YAAcJ,KAAKyB,QAAQV,OAChCf,KAAKS,WAAW,4BAA8BT,KAAKI,UACnDJ,KAAKS,WAAW,4BAA8BT,KAAKI,UACnDJ,KAAKE,mBAAmB8B,gBAI1B/B,EAAFY,UAAAoB,iBAAE,SAAiBlC,GACf,GAAMmC,GAAQ,GAAIrC,GAA6BG,KAAMD,EACrDC,MAAKO,eAAe4B,KAAKD,mBAhG7BE,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,wJACVC,QAAF,kdACEC,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,EACEC,gBAAFC,EAAAA,wBAAAC,OACEC,SAAF,kBACEC,MACFC,MAAA,4GAvCAlD,EAAAmD,6GA2DA3B,UAAAW,KAAAiB,EAAAA,gBAAAf,MAAAgB,EAAAA,WAAAC,aAAA,MAGAC,eAAApB,KAAAiB,EAAAA,gBAAAf,MAAAmB,EAAAA,eAGAnD,cAAA8B,KAAAsB,EAAAA,QAGAnD,iBAAA6B,KAAAuB,EAAAA,SAGA7C,YAAAsB,KAAAsB,EAAAA,MAAQpB,MAAR,YAUArC,KD9Ba2D,EACT,GAAIC,GAAAA,eAAqC,oCAShCC,GACXC,QAASH,EACTI,MAAOC,EAAAA,SACPC,WAAY5E,GAOD6E,GACXJ,QAASK,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,gBAwDP,QAAFD,GAAsBE,EAA8BC,EAC9BC,EACAC,EACA1E,EAC0C2E,EAC9BC,EACQC,EACUC,GAP9BhF,KAAtByE,SAAsBA,EAA8BzE,KAApD0E,SAAoDA,EAC9B1E,KAAtB2E,kBAAsBA,EACA3E,KAAtB4E,MAAsBA,EACA5E,KAAtBE,mBAAsBA,EAC0CF,KAAhE6E,gBAAgEA,EAC9B7E,KAAlC8E,KAAkCA,EACQ9E,KAA1C+E,WAA0CA,EACU/E,KAApDgF,UAAoDA,EA9BpDhF,KAAAiF,YAAgC,EAMhCjF,KAAAkF,wBAAmC,EAMnClF,KAAAmF,mBAA+B,GAAIC,GAAAA,QAGnCpF,KAAAqF,UAAoC,aAGpCrF,KAAAsF,WAAe,aAzIf,MAuJEf,GAAF1D,UAAA0E,YAAE,WACEvF,KAAKwF,gBACLxF,KAAKmF,mBAAmBM,YAI1B9E,OAAFC,eAAM2D,EAAN1D,UAAA,iBAAE,WACE,MAAOb,MAAKiF,YAAcjF,KAAK0F,aAAatF,2CAI9CmE,EAAF1D,UAAA8E,UAAE,WACE3F,KAAK4F,iBACL5F,KAAK6F,eAIPtB,EAAF1D,UAAAiF,WAAE,WACE9F,KAAK+F,cAED/F,KAAKiF,aACPjF,KAAK0F,aAAarF,QAAUL,KAAKiF,YAAa,EAE1CjF,KAAKgG,aAAehG,KAAKgG,YAAYC,gBACvCjG,KAAKgG,YAAYE,SACjBlG,KAAKmG,4BAA4BC,eAOnCpG,KAAKE,mBAAmBmG,kBAQ5B1F,OAAFC,eAAM2D,EAAN1D,UAAA,2BAAE,WAAA,GAAFM,GAAAnB,IACI,OAAOsG,GAAAA,MACLtG,KAAKuG,iBACLvG,KAAK0F,aAAanE,YAAYiF,OAAOC,KAAKC,EAAAA,OAAO,WAAM,MAAAvF,GAAK8D,cAC5DjF,KAAKmF,mBACLnF,KAAK2G,oBACL3G,KAAKgG,YACDhG,KAAKgG,YAAYY,cAAcH,KAAKC,EAAAA,OAAO,WAAM,MAAAvF,GAAK8D,cACtD4B,EAAAA,uCAKRlG,OAAFC,eAAM2D,EAAN1D,UAAA,wBAAE,WACE,MAAOyF,GAAAA,MAAXQ,UAAA,GAAoB9G,KAAK0F,aAAajE,QAAQsF,IAAI,SAAAhH,GAAU,MAAAA,GAAOiH,sDAIjErG,OAAFC,eAAM2D,EAAN1D,UAAA,oBAAE,WACE,MAAIb,MAAK0F,cAAgB1F,KAAK0F,aAAanE,YAClCvB,KAAK0F,aAAanE,YAAY0F,WAGhC,sCAIXtG,OAAAC,eAAc2D,EAAd1D,UAAA,gDACI,OAAKb,MAAKgF,UAIHsB,EAAAA,MACLY,EAAAA,UAAUlH,KAAKgF,UAAW,SAC1BkC,EAAAA,UAAUlH,KAAKgF,UAAW,aAE3ByB,KAAKC,EAAAA,OAAO,SAACxE,GACZ,GAAMiF,GAAcjF,EAA2B,OACzCkF,EAAYjG,EAAK4D,WACnB5D,EAAK4D,WAAW5E,YAAYkB,cAAgB,IAEhD,OAAOF,GAAK8D,YACJkC,IAAgBhG,EAAKsD,SAASpD,iBAC5B+F,IAAcA,EAAUC,SAASF,OAChChG,EAAK6E,cAAgB7E,EAAK6E,YAAYsB,eAAeD,SAASF,MAflEN,EAAAA,GAAa,uCAyBxBtC,EAAF1D,UAAA0G,WAAE,SAAWC,GAAX,GAAFrG,GAAAnB,IACIyH,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAxG,GAAKyG,iBAAiBJ,MAUzDjD,EAAF1D,UAAAgH,iBAAE,SAAiBC,GACf9H,KAAKqF,UAAYyC,GAUnBvD,EAAF1D,UAAAkH,kBAAE,SAAkBD,GAChB9H,KAAKsF,WAAawC,GAOpBvD,EAAF1D,UAAAmH,iBAAE,SAAiBC,GACfjI,KAAKyE,SAASpD,cAAc6G,SAAWD,GAGzC1D,EAAF1D,UAAAsH,eAAE,SAAejG,GACb,GAAMkG,GAAUlG,EAAMkG,OAEtB,IAAIA,IAAYC,EAAAA,QAAUrI,KAAKsI,UAC7BtI,KAAKuI,mBACLvI,KAAKmF,mBAAmBqD,OACxBtG,EAAMuG,sBACD,IAAIzI,KAAK0I,cAAgBN,IAAYO,EAAAA,OAAS3I,KAAKsI,UACxDtI,KAAK0I,aAAaE,wBAClB5I,KAAKuI,mBACLrG,EAAM2G,qBACD,CACL,GAAMC,GAAiB9I,KAAK0F,aAAanE,YAAY0F,WAC/C8B,EAAaX,IAAYY,EAAAA,UAAYZ,IAAYa,EAAAA,UAEnDjJ,MAAKsI,WAAaF,IAAYc,EAAAA,IAChClJ,KAAK0F,aAAanE,YAAY4H,UAAUjH,GAC/B6G,GACT/I,KAAK2F,aAGHoD,GAAc/I,KAAK0F,aAAanE,YAAY0F,aAAe6B,IAC7D9I,KAAKoJ,oBAKX7E,EAAF1D,UAAAwI,aAAE,SAAanH,GAIPoH,SAASC,gBAAkBrH,EAAMsH,SACnCxJ,KAAKqF,UAAWnD,EAAgC,OAAEsF,OAClDxH,KAAK2F,cAITpB,EAAF1D,UAAA4I,aAAE,WACOzJ,KAAKyE,SAASpD,cAAcqI,WAC/B1J,KAAK4F,iBACL5F,KAAK6F,aAAY,KAUbtB,EAAV1D,UAAAgF,YAAA,SAAsB8D,OAAtB,KAAAA,IAAsBA,GAAtB,GACQ3J,KAAK+E,YAA6C,SAA/B/E,KAAK+E,WAAW6E,aACjCD,EACF3J,KAAK+E,WAAW8E,uBAEhB7J,KAAK+E,WAAW6E,WAAa,SAG/B5J,KAAKkF,wBAAyB,IAK1BX,EAAV1D,UAAAkF,uBACQ/F,KAAKkF,yBACPlF,KAAK+E,WAAW6E,WAAa,OAC7B5J,KAAKkF,wBAAyB,IAa1BX,EAAV1D,UAAAuI,2BACI,GAAMU,GAAoB9J,KAAK0F,aAAanE,YAAYwI,iBAAmB,EACrEC,EAAa1G,EAAAA,UAAU2G,6BAA6BH,EACtD9J,KAAK0F,aAAajE,QAASzB,KAAK0F,aAAalC,cAC3C0G,EAjTgC,IAiThBJ,EAAoBE,GACpCG,EAAWnK,KAAK0F,aAAa3D,eAEnC,IAAImI,EAAeC,EAEjBnK,KAAK0F,aAAa9D,cAAcsI,OAC3B,IAAIA,EAvT2B,GAuTiBC,EApTlB,IAoTwD,CAE3F,GAAMC,GAAeF,EAtTc,IAHC,EA0TpClK,MAAK0F,aAAa9D,cAAcyI,KAAKC,IAAI,EAAGF,MAQxC7F,EAAV1D,UAAA0J,iDACUC,EAAcxK,KAAK4E,MAAM6F,SAASC,eAAejE,KAAKkE,EAAAA,KAAK,IAC3DC,EAAgB5K,KAAK0F,aAAajE,QAAQoJ,QAAQpE,KACtDqE,EAAAA,IAAI,WAAM,MAAA3J,GAAK4J,kBAAkBC,4BAGjCC,EAAAA,MAAM,GAIR,OAAO3E,GAAAA,MAAMkE,EAAaI,GACvBnE,KAGCyE,EAAAA,UAAU,WAGR,MAFA/J,GAAKoH,mBACLpH,EAAKuE,aAAa/D,iBACXR,EAAKgK,sBAGdR,EAAAA,KAAK,IAGNS,UAAU,SAAAlJ,GAAS,MAAAf,GAAKkK,kBAAkBnJ,MAIvCqC,EAAV1D,UAAA2E,yBACQxF,KAAKgG,cACPhG,KAAK8F,aACL9F,KAAKgG,YAAYsF,UACjBtL,KAAKgG,YAAc,OAIfzB,EAAV1D,UAAA+G,iBAAA,SAA2BJ,GACvB,GAAM+D,GAAYvL,KAAK0F,cAAgB1F,KAAK0F,aAAapF,YACvDN,KAAK0F,aAAapF,YAAYkH,GAC9BA,EAIIgE,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CvL,MAAK+E,WACP/E,KAAK+E,WAAW0G,SAASjE,MAAQgE,EAEjCxL,KAAKyE,SAASpD,cAAcmG,MAAQgE,GAShCjH,EAAV1D,UAAAwK,kBAAA,SAA4BnJ,GACpBA,GAASA,EAAMpC,SACjBE,KAAK0L,6BAA6BxJ,EAAMpC,QACxCE,KAAK4H,iBAAiB1F,EAAMpC,OAAO0H,OACnCxH,KAAKqF,UAAUnD,EAAMpC,OAAO0H,OAC5BxH,KAAKyE,SAASpD,cAAcsK,QAC5B3L,KAAK0F,aAAazD,iBAAiBC,EAAMpC,SAG3CE,KAAK8F,cAMCvB,EAAV1D,UAAA6K,6BAAA,SAAuCE,GACnC5L,KAAK0F,aAAajE,QAAQR,QAAQ,SAAAlB,GAC5BA,GAAU6L,GAAQ7L,EAAO8L,UAC3B9L,EAAO+L,cAKLvH,EAAV1D,UAAA+E,0BACI,IAAK5F,KAAK0F,aACR,KAAMhG,IAGHM,MAAKgG,YAKRhG,KAAKgG,YAAY+F,YAAYC,MAAOhM,KAAKiM,mBAJzCjM,KAAKkM,QAAU,GAAIC,GAAAA,eAAenM,KAAK0F,aAAalD,SAAUxC,KAAK2E,mBACnE3E,KAAKgG,YAAchG,KAAK0E,SAAS0H,OAAOpM,KAAKqM,sBAM3CrM,KAAKgG,cAAgBhG,KAAKgG,YAAYC,gBACxCjG,KAAKgG,YAAYsG,OAAOtM,KAAKkM,SAC7BlM,KAAKmG,4BAA8BnG,KAAKuK,8BAG1CvK,KAAK0F,aAAa/D,iBAClB3B,KAAK0F,aAAarF,QAAUL,KAAKiF,YAAa,GAGxCV,EAAV1D,UAAAwL,6BACI,MAAO,IAAIE,GAAAA,eACTC,iBAAkBxM,KAAKyM,sBACvBC,eAAgB1M,KAAK6E,kBACrBmH,MAAOhM,KAAKiM,gBACZU,UAAW3M,KAAK8E,KAAO9E,KAAK8E,KAAK0C,MAAQ,SAIrCjD,EAAV1D,UAAA4L,+BAOI,MANAzM,MAAK+K,kBAAqB/K,KAAK0E,SAASkI,WAAWC,YAC/C7M,KAAK8M,wBACJC,QAAS,QAASC,QAAS,WAAYC,SAAU,QAASC,SAAU,QACpEC,sBACIJ,QAAS,QAASC,QAAS,QAASC,SAAU,QAASC,SAAU,WAEnElN,KAAK+K,mBAGNxG,EAAV1D,UAAAiM,gCACI,MAAO9M,MAAK+E,WAAa/E,KAAK+E,WAAWqI,wBAA0BpN,KAAKyE,UAIlEF,EAAV1D,UAAAoL,yBACI,MAAOjM,MAAK8M,uBAAuBzL,cAAcgM,wBAAwBrB,OAInEzH,EAAV1D,UAAA0H,4BACIvI,KAAK0F,aAAanE,YAAY+L,eAAe,mBA9ZjDlL,KAACmL,EAAAA,UAADjL,OACEC,SAAU,oDACVW,MACEsK,KAAQ,WACR9H,aAAgB,MAChB+H,oBAAqB,OACrBC,+BAAgC,mBAChCC,uBAAwB,uBACxBC,mBAAoB,mBAGpBC,YAAa,iBACbC,SAAU,eACVC,UAAW,uBACXC,YAAa,0BAEfC,WAAY9J,2CAxFd/B,KAAE8L,EAAAA,aAfF9L,KAAE6B,EAAAA,UAwBF7B,KAAE+L,EAAAA,mBAHF/L,KAAEgM,EAAAA,SARFhM,KAAEiM,EAAAA,oBA0HFjM,SAAAkM,GAAAC,aAAAnM,KAAeoM,EAAAA,OAAflM,MAAsBsB,OA3ItBxB,KAAQqM,EAAAA,eAARF,aAAAnM,KA4IesM,EAAAA,aA5GftM,KAAQuM,EAAAA,aAARJ,aAAAnM,KA6GesM,EAAAA,WA7GftM,KA6G2BwM,EAAAA,SAC3BxM,SAAAkM,GAAAC,aAAAnM,KAAesM,EAAAA,WAAftM,KAA2BoM,EAAAA,OAA3BlM,MAAkCuM,EAAAA,iCATlCnJ,eAAAtD,KAAGsB,EAAAA,MAAHpB,MAAS,sBA5ITiC,KEQAuK,EAAA,yBARA,sBAkBA1M,KAAC2M,EAAAA,SAADzM,OACE0M,SAAUC,EAAAA,gBAAiBC,EAAAA,cAAeC,EAAAA,gBAAiBC,EAAAA,cAC3DC,SAAUpP,EAAiBgP,EAAAA,gBAAiB1K,EAAwB4K,EAAAA,iBACpEG,cAAerP,EAAiBsE,GAChC0J,WAAYnK,6CAtBdgL,iHFyD0C,+BAGD"}