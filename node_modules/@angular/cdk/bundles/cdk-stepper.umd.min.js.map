{"version":3,"file":"cdk-stepper.umd.min.js","sources":["../../src/cdk/stepper/step-label.ts","../../src/cdk/stepper/stepper.ts","../../src/cdk/stepper/stepper-button.ts","../../src/cdk/stepper/stepper-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  Directive,\n  ElementRef,\n  Component,\n  ContentChild,\n  ViewChild,\n  TemplateRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnChanges,\n  OnDestroy\n} from '@angular/core';\nimport {LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {CdkStepLabel} from './step-label';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractControl} from '@angular/forms';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs/Subject';\n\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  templateUrl: 'step.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: AbstractControl;\n\n  /** Whether user has seen the expanded step content or not. */\n  interacted = false;\n\n  /** Label of the step. */\n  @Input() label: string;\n\n  /** Whether the user can return to this step once it has been marked as complted. */\n  @Input()\n  get editable(): boolean { return this._editable; }\n  set editable(value: boolean) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  private _editable = true;\n\n  /** Whether the completion of step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional = false;\n\n  /** Whether step is marked as completed. */\n  @Input()\n  get completed(): boolean {\n    return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;\n  }\n  set completed(value: boolean) {\n    this._customCompleted = coerceBooleanProperty(value);\n  }\n  private _customCompleted: boolean | null = null;\n\n  private get _defaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n\n  constructor(@Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper) { }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements OnDestroy {\n  /** Emits when the component is destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The list of step components that the stepper is holding. */\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\n\n  /** The list of step headers of the steps in the stepper. */\n  _stepHeader: QueryList<ElementRef>;\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input()\n  get linear(): boolean { return this._linear; }\n  set linear(value: boolean) { this._linear = coerceBooleanProperty(value); }\n  private _linear = false;\n\n  /** The index of the selected step. */\n  @Input()\n  get selectedIndex() { return this._selectedIndex; }\n  set selectedIndex(index: number) {\n    if (this._steps) {\n      if (this._anyControlsInvalidOrPending(index) || index < this._selectedIndex &&\n          !this._steps.toArray()[index].editable) {\n        // remove focus from clicked step header if the step is not able to be selected\n        this._stepHeader.toArray()[index].nativeElement.blur();\n      } else if (this._selectedIndex != index) {\n        this._emitStepperSelectionEvent(index);\n        this._focusIndex = this._selectedIndex;\n      }\n    } else {\n      this._selectedIndex = this._focusIndex = index;\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** The step that is selected. */\n  @Input()\n  get selected() { return this._steps.toArray()[this.selectedIndex]; }\n  set selected(step: CdkStep) {\n    this.selectedIndex = this._steps.toArray().indexOf(step);\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output() selectionChange = new EventEmitter<StepperSelectionEvent>();\n\n  /** The index of the step that the focus can be set. */\n  _focusIndex: number = 0;\n\n  /** Used to track unique ID for each stepper component. */\n  _groupId: number;\n\n  constructor(\n    @Optional() private _dir: Directionality,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index: number): 'number' | 'edit' | 'done' {\n    const step = this._steps.toArray()[index];\n    if (!step.completed || this._selectedIndex == index) {\n      return 'number';\n    } else {\n      return step.editable ? 'edit' : 'done';\n    }\n  }\n\n  private _emitStepperSelectionEvent(newIndex: number): void {\n    const stepsArray = this._steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        if (this._layoutDirection() === 'rtl') {\n          this._focusPreviousStep();\n        } else {\n          this._focusNextStep();\n        }\n        break;\n      case LEFT_ARROW:\n        if (this._layoutDirection() === 'rtl') {\n          this._focusNextStep();\n        } else {\n          this._focusPreviousStep();\n        }\n        break;\n      case SPACE:\n      case ENTER:\n        this.selectedIndex = this._focusIndex;\n        break;\n      default:\n        // Return to avoid calling preventDefault on keys that are not explicitly handled.\n        return;\n    }\n    event.preventDefault();\n  }\n\n  private _focusNextStep() {\n    this._focusStep((this._focusIndex + 1) % this._steps.length);\n  }\n\n  private _focusPreviousStep() {\n    this._focusStep((this._focusIndex + this._steps.length - 1) % this._steps.length);\n  }\n\n  private _focusStep(index: number) {\n    this._focusIndex = index;\n    this._stepHeader.toArray()[this._focusIndex].nativeElement.focus();\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    const steps = this._steps.toArray();\n\n    steps[this._selectedIndex].interacted = true;\n\n    if (this._linear && index >= 0) {\n      return steps.slice(0, index).some(step =>\n        step.stepControl && (step.stepControl.invalid || step.stepControl.pending)\n      );\n    }\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {'(click)': '_stepper.next()'}\n})\nexport class CdkStepperNext {\n  constructor(public _stepper: CdkStepper) { }\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'}\n})\nexport class CdkStepperPrevious {\n  constructor(public _stepper: CdkStepper) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n@NgModule({\n  imports: [BidiModule, CommonModule],\n  exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n  declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n})\nexport class CdkStepperModule {}\n"],"names":["CdkStepLabel","template","this","type","Directive","args","selector","TemplateRef","nextId","StepperSelectionEvent","CdkStep","_stepper","interacted","_editable","_optional","_customCompleted","Object","defineProperty","prototype","value","coerceBooleanProperty","_defaultCompleted","stepControl","valid","select","selected","ngOnChanges","_stateChanged","Component","exportAs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","label","editable","optional","completed","CdkStepper","_changeDetectorRef","_selectedIndex","get","configurable","_anyControlsInvalidOrPending","index","_steps","toArray","_stepHeader","nativeElement","blur","_emitStepperSelectionEvent","_focusIndex","enumerable","_destroyed","complete","position","_layoutDirection","step","selectionChange","emit","selectedIndex","newIndex","previouslySelectedIndex","selectedStep","stepsArray","previouslySelectedStep","RIGHT_ARROW","_focusPreviousStep","_focusNextStep","LEFT_ARROW","SPACE","ENTER","event","preventDefault","focus","steps","_linear","slice","some","invalid","pending","decorators","Output","CdkStepperNext","host","(click)","CdkStepperPrevious","CdkStepperModule","NgModule","imports","BidiModule","CommonModule","exports","declarations"],"mappings":"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"}